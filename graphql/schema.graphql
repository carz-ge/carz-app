schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input AuthenticationInput {
  phone: String!
  otp: String!
}

type AuthenticationOutput {
  accessToken: String!
  refreshToken: String
}

type SendOptOutput {
  sent: Boolean!
  expiresAt: String
  isRegistered: Boolean
}

type Query {
  checkPhone(phone: String!): Boolean!
  listCars: [Car!]!
  listCards: [Card!]!
  listCategories: [Category!]!
  echo(message: String): String
  echoAuthorized(message: String): String
  echoMono(message: String): String
  echoFlux(message: String): [String]
  listOrders: [Order!]!
  listOrdersByManager: [Order!]!
  getOrder(id: ID!): Order!
  getCommission(productId: ID!, packageId: ID): Commission!
  getPaymentInfo(orderId: ID!): String
  listProductDetailsByProductId(productId: ID!): [ProductDetails!]!
  getProduct(productId: ID!): Product!
  listProducts: [Product!]!
  listProductByCategoryId(categoryId: ID!): [Product!]!
  listProductByProviderId(providerId: ID!): [Product!]!
  searchProducts(filter: ProductFilterInput!): [Product!]!
  listProviders: [Provider!]!
  listQueue(providerId: ID): [ScheduledTimeSlotSchema]
  listChatMessages: [ChatMessage!]!
  getMe: User!
  getUserById(userId: ID!): User!
}

type Mutation {
  sendOtp(phone: String!): SendOptOutput!
  authorize(input: AuthenticationInput!): AuthenticationOutput!
  checkPhoneForManger(phone: String!): SendOptOutput!
  authenticateManager(input: AuthenticationInput!): AuthenticationOutput!
  addCar(carInput: CarInput!): Car!
  removeCar(carId: ID!): Boolean!
  updateCar(carId: ID!, carInput: CarInput!): Car!
  createCategory(input: CategoryInput!): Category!
  updateCategory(categoryId: ID!, input: CategoryInput!): Category!
  removeCategory(categoryId: ID!): Boolean!
  respondToOrder(managersOrderResponse: ManagersOrderResponseInput!): Boolean
  sendPushNotification(input: PushNotificationInput!): Boolean
  sendSmsNotification(input: SmsNotification!): Boolean
  createOrder(order: OrderInput!): OrderInitializationResponse!
  initPayment(input: InitializePaymentInput!): OrderProcessingResponse!
  createOrderBySavedCard(input: InitializePaymentWithSavedCardsInput!): OrderProcessingResponse!
  saveCard(orderId: ID!): Boolean
  removeCard(orderId: ID!): Boolean
  confirmPreAuthorization(orderId: ID!): Boolean
  rejectPreAuthorization(orderId: ID!): Boolean
  refund(orderId: ID!, refundAmount: String!): Boolean
  createProductDetails(input: ProductDetailsInput!): ProductDetails!
  updateProductDetails(productDetailsId: ID!, input: ProductDetailsInput!): ProductDetails!
  removeProductDetails(productDetailsId: ID!): Boolean!
  createProduct(input: ProductInput!): Product!
  updateProduct(productId: ID!, input: ProductInput!): Product!
  removeProduct(productId: ID!): Boolean!
  createProvider(input: ProviderInput!): Provider!
  updateProvider(input: ProviderInput!): Provider!
  removeProvider(providerId: ID!): Boolean!
  scheduleCarForService(input: ScheduleCarForServiceInput): [ScheduledTimeSlotSchema]
  updateUser(input: UpdateUserInput!): User!
  removeUser: Boolean
  deactivateUser: Boolean
  addDeviceToken(input: AddDeviceTokenInput!): Boolean
}

enum CarType {
  ALL
  SEDAN
  HATCHBACK
  SUV
  VAN
  TRUCK
  MOTORCYCLE
  OTHER
}

type Car {
  id: ID!
  plateNumber: String!
  carType: CarType
  techPassportNumber: String
  vin: String
  make: String
  model: String
  year: Int
  createdAt: String
  updatedAt: String
}

input CarInput {
  plateNumber: String!
  carType: CarType
  techPassportNumber: String
  vin: String
  make: String
  model: String
  year: Int
}

type Card {
  id: ID!
  pan: String!
  cardType: String!
  expirationDate: String!
}

type Category {
  id: ID!
  name: LingualString!
  internalName: String!
  image: String
  priority: Int!
  active: Boolean!
}

input CategoryInput {
  name: LingualStringInput!
  internalName: String!
  image: String
  priority: Int
  active: Boolean
}

type LingualString {
  ka: String!
  en: String!
}

input LingualStringInput {
  ka: String!
  en: String!
}

enum Currency {
  GEL
  USD
  EUR
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Language {
  KA
  EN
}

type Address {
  street: String!
  district: String!
  city: String!
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type Location {
  address: Address!
  coordinates: Coordinates!
}

input LocationInput {
  address: AddressInput!
  coordinates: CoordinatesInput!
}

input AddressInput {
  street: String!
  district: String!
  city: String!
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

input ManagersOrderResponseInput {
  orderId: ID!
  productId: ID!
  providerId: ID!
  accepted: Boolean!
}

input PushNotificationInput {
  deviceToken: String!
  title: String!
  text: String!
}

input SmsNotification {
  phone: String!
  text: String!
}

enum OrderStatus {
  NEW
  PROCESSING
  PAYED
  WAITING_MANAGER
  ACTIVE
  CANCELLED
  REJECTED
  REIMBURSED
  FAILED
}

input OrderedProductInput {
  productId: ID!
  packageId: ID!
  schedulingDay: String
  schedulingTime: String
}

type OrderedProduct {
  productId: ID!
  packageId: ID!
  schedulingDay: String
  schedulingTime: String
}

type Order {
  id: ID!
  userId: ID!
  categoryId: ID!
  providerId: ID
  productId: ID!
  packageId: ID!
  schedulingDay: String
  schedulingTime: String
  orderStatus: OrderStatus
}

input OrderInput {
  idempotencyKey: String!
  productId: ID!
  packageId: ID!
  schedulingDay: String
  schedulingTime: String
  carType: CarType
  carPlateNumber: String
  carId: ID
  comment: String
}

type OrderInitializationResponse {
  id: ID!
  idempotencyKey: String!
  redirectLink: String!
  totalPrice: Int!
  commission: Int!
  productId: ID!
  categoryId: ID!
  packageId: ID!
  providerId: ID!
  schedulingDay: String
  schedulingTime: String
  orderStatus: OrderStatus
  carType: CarType
  carPlateNumber: String
  createdAt: String
}

type Commission {
  commission: Int!
  commissionToShow: String!
}

input InitializePaymentInput {
  idempotencyKey: String!
  isAutomatic: Boolean!
  totalAmount: Float!
  unitPrice: Float!
  saveCard: Boolean!
}

input InitializePaymentWithSavedCardsInput {
  idempotencyKey: String!
  isAutomatic: Boolean!
  orderId: ID!
  totalAmount: Float!
  unitPrice: Float!
}

type OrderProcessingResponse {
  idempotencyKey: String!
  orderId: String!
  redirectLink: String!
}

type ProductDetailsCarPrice {
  order: ID
  carType: CarType!
  price: Int
}

type ProductDetails {
  id: ID!
  productId: ID!
  name: LingualString!
  description: LingualString
  pricesForCarTypes: [ProductDetailsCarPrice!]
  availableServices: [LingualString!]
  notAvailableServices: [LingualString]
  currency: Currency
  averageDurationMinutes: Int
}

input ProductDetailsCarPriceInput {
  carType: CarType!
  price: Int!
}

input ProductDetailsInput {
  productId: ID!
  name: LingualStringInput!
  description: LingualStringInput
  pricesForCarTypes: [ProductDetailsCarPriceInput!]!
  availableServices: [LingualStringInput!]
  notAvailableServices: [LingualStringInput]
  currency: Currency
  averageDurationMinutes: Int
}

type Product {
  id: ID!
  name: LingualString!
  providerId: ID!
  categoryId: ID!
  description: LingualString
  packages: [ProductDetails!]
  provider: Provider!
  location: Location
  mainImage: String!
  images: [String!]
  tags: [String!]
}

input ProductInput {
  name: LingualStringInput!
  categoryId: ID!
  providerId: ID!
  description: LingualStringInput
  location: LocationInput
  mainImage: String!
  images: [String!]
  tags: [String!]
}

input ProductFilterInput {
  categoryId: ID
  carType: CarType
  date: String
  time: String
}

type Provider {
  id: ID!
  name: String!
  phone: String
  email: String
  logo: String
  website: String
}

input ProviderInput {
  name: String!
  phone: String
  email: String
  logo: String
  website: String
}

type WorkingHours {
  dayOfWeek: DayOfWeek!
  startTime: String!
  endTime: String!
}

input WorkingHoursInput {
  dayOfWeek: DayOfWeek!
  startTime: String!
  endTime: String!
}

type ScheduledTimeSlotSchema {
  orderNumber: String
  carPlateNumber: String
  timeSlot: String
}

input ScheduleCarForServiceInput {
  productId: ID!
  carPlateNumber: String
  customerPhoneNumber: String
  schedulingDay: String
  schedulingTime: String
}

type Subscription {
  subscribeToQueue(providerId: ID): [String]
}

enum ChatMessageStatus {
  SENT
  IN_PROGRESS
  SUCCESS
  FAIL
}

type ChatMessage {
  id: ID!
  createdAt: String!
  text: String!
  isAnswer: Boolean!
  status: ChatMessageStatus
}

enum UserRole {
  USER
  MANAGER
  ADMIN
}

type User {
  id: ID!
  phone: String!
  email: String
  role: UserRole!
  firstname: String
  lastname: String
  language: Language!
  deactivated: Boolean
  removed: Boolean
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  firstname: String!
  lastname: String!
  language: Language
  email: String
}

input AddDeviceTokenInput {
  deviceToken: String!
  platform: String!
}
